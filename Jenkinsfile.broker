pipeline {
    agent any
    options {
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '14',
                numToKeepStr: '10'
            ))
        disableConcurrentBuilds()
    }
    parameters {
        booleanParam defaultValue: params.Bleed ?:false, description: 'Is this a "bleeding edge" build?', name: 'Bleed'
        booleanParam defaultValue: params.Daily ?:false, description: 'Is this a Daily build?', name: 'Daily'
        booleanParam defaultValue: params.Release ?:false, description: 'Is this a Release build?', name: 'Release'
        booleanParam defaultValue: false, description: 'Test the broker, only trigger the Test CSC Conda job', name: 'test'
        string defaultValue: params.Branch ?:'develop', description: 'A user defined branch to use for building the CSC Conda jobs.', name: 'Branch', trim: true
        string defaultValue: '\'\'', description: 'The XML version.', name: 'XML_Version', trim: true
        string defaultValue: '\'\'', description: 'The SAL version.', name: 'SAL_Version', trim: true
        string defaultValue: '\'\'', description: 'The version of the IDL conda package.', name: 'idl_version', trim: true
        string defaultValue: '\'\'', description: 'The version of the SalObj conda package.', name: 'salobj_version', trim: true
    }
    stages {
        stage('Define Build Variables') {
            steps {
                script {
                    if (params.Release) {
                        branch = "main"
                    } else if (params.Daily) {
                        branch = "develop"
                    } else {
                        branch = params.Branch
                    }
                }
            }
        }//Define Variables
        stage('Trigger CSC Conda jobs') {
            steps {
                script {
                    def jobs = []
                    def wait = 0
                    if (params.test) {
                        sh "echo This is a test"
                        jobs = ['IntegrationTests']
                    } else {
                        jobs = ['EssCommon', 'AstroskyModel', 'ATAOS', 'ATDome', 'ATDomeTrajectory', 'ATHexapod', 'ATMCSsimulator', 'ATPneumaticssimulator', 'ATSpectrograph', 'attcpip', 
                            'ATWhiteLight', 'AudioBroadcaster', 'CBP', 'CRIOPy', 'Cycle', 'DateLoc', 'ddsconfig', 'DIMM', 'DREAM', 'DSM', 'EAS', 'Electrometer', 'ExternalScripts', 
                            'FiberSpectrograph', 'GIS', 'GenericCamera', 'hexrotcomm', 'HVAC', 'IntegrationTests', 'LaserTracker', 'LinearStage', 'LOVE_commander', 'LOVE_producer',
                            'M2Com', 'M2Gui', 'M2simulator', 'MTAirCompressor', 'MTDome', 'MTDomeTrajectory', 'MTEEC', 'MTHexapod', 'MTMount', 'ObservatoryModel', 'PMD', 'PreCommitConfig',
                            'salkafka', 'SimActuators', 'StandardScripts', 'TcpIP', 'TunableLaser', 'Utils', 'Vanward', 'Watcher', 'WeatherForecast',
                            'EssController', 'EssCsc', 'EssLabjack', 'XML', 'ObservatoryControl', 'MTRotator', 'Scheduler']
                    }
                    sal_ver = sh(returnStdout: true, script: '#!/bin/bash -x\n' + "echo ${SAL_Version} |sed 's/.pre[0-9]*//g'").trim()
                    idl_version = "${idl_version}=${XML_Version}_${sal_ver}"
                    salobj_version="${salobj_version}"
                    for (int i = 0; i < jobs.size(); ++i) {
                        if ("${jobs[i]}"=="ObservatoryControl") {
                            wait=300
                        } else if("${jobs[i]}"=="MTRotator") {
                            wait=600
                        } else {
                            wait=0
                        }
                        // The Cycle conda job uses the main branch as the default.
                        if (("${jobs[i]}"=="Cycle") || ("${jobs[i]}"=="Vanward")) {
                            build_branch="main"
                        } else {
                            build_branch=branch
                        }
                        echo "Starting the ${jobs[i]} job using the ${build_branch} branch and idl_version: ${idl_version}, salobj_version: ${salobj_version}"
                        build quietPeriod: "${wait}", wait: false, job: "${jobs[i]}" + "_conda_package/" + build_branch, parameters:
                            [string(name: 'idl_version', value: idl_version), string(name: 'salobj_version', value: salobj_version)]
                    }//ForLoop
                }//script
            }//steps
        }//Trigger
    }//stages
}//pipeline
