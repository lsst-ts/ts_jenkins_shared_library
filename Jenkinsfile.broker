pipeline {
    agent any
    options {
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '14',
                numToKeepStr: '10'
            ))
        disableConcurrentBuilds()
    }
    parameters {
        booleanParam defaultValue: params.Bleed ?:false, description: 'Is this a "bleeding edge" build?', name: 'Bleed'
        booleanParam defaultValue: params.Daily ?:false, description: 'Is this a Daily build?', name: 'Daily'
        booleanParam defaultValue: params.Release ?:false, description: 'Is this a Release build?', name: 'Release'
        string defaultValue: params.Branch ?:'develop', description: 'A user defined branch to use for building the CSC Conda jobs.', name: 'Branch', trim: true
        string defaultValue: '\'\'', description: 'The version of the IDL conda package.', name: 'idl_version', trim: true
        string defaultValue: '\'\'', description: 'The version of the SalObj conda package.', name: 'salobj_version', trim: true
    }
    stages {
        stage('Define Build Variables') {
            steps {
                script {
                    if (params.Release) {
                        branch = "master"
                    } else if (params.Daily) {
                        branch = "develop"
                    } else {
                        branch = params.Branch
                    }
                }
            }
        }//Define Variables
        stage('Trigger CSC Conda jobs') {
            steps {
                script {
                    def jobs = ['ATAOS', 'ATDome', 'ATHexapod', 'ATMCSsimulator', 'ATPneumaticssimulator', 'ATSpectrograph', 'CBP', 'DIMM', 'DSM', 
                        'EAS', 'Electrometer', 'ESS', 'ExternalScripts', 'FiberSpectrograph', 'hexrotcomm', 'M2simulator', 'MTDome', 'MTDomeTrajectory',
                        'MTEEC', 'MTHexapod', 'MTMount', 'MTRotator', 'ObservatoryControl', 'salkafka', 'SimActuators', 'StandardScripts', 'TunableLaser',
                        'Watcher', 'WeatherStation']
                        
                    for (int i = 0; i < jobs.size(); ++i) {
                        echo "Starting the ${jobs[i]} job using the ${branch} branch and idl_version: ${idl_version}, salobj_version: ${salobj_version}"
                        build wait: false, job: "${jobs[i]}" + "_conda_package/" + branch, parameters: 
                            [string(name: 'idl_version', value: idl_version), string(name: 'salobj_version', value: salobj_version)]
                    }//ForLoop
                }//script
            }//steps
        }//Trigger
    }//stages
}//pipeline
